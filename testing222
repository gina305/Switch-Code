<h1 style="text-align: center"></h1><h1 style="text-align: center">Django HTML Templates: with Python Tutorial 2022: Templates - The Django Book</h1><p style="text-align: center"><em>Published 8/25/2022</em></p><p style="text-align: center"><em>Author: </em><a target="_blank" rel="noopener noreferrer" href="https://www.linkedin.com/in/gn2022/"><em>Gina Napier</em></a></p><p></p><p>In this article, we look at how to create a Django app with Python. We will quickly walk through how to set up a Djangoproject and app.</p><h2>What is Django?</h2><p>Django is an open source project that allows developers to build dynamic websites quickly and easily.  Django uses the Django Framework to use Django to create a simple website.</p><h3>The Django Framework</h3><p>Django is a full stack framework that includes everything needed to develop a complete application. It can be used by any programming language, such as Python, Java, Ruby, Perl, etc.</p><p></p><h2>Setting Up Your Development Environment</h2><p>To begin, let's start by setting up our environment. To successfully following along in this tutorial, You'll need the following installed on your computer:</p><ul><li><p>git for managing code integration &amp; deployment</p></li><li><p>django (i.e. pip install django) for developing our app</p></li><li><p>venv (i.e. pip install venv) for creating a virtual environment</p></li></ul><p>If you need quick steps on setting up your project repo, check out this article.</p><p>To begin, navigate to a folder where you wish to create your new project. Next, create and activate a virtual environment for your project. Running your project in a virtual environment allows you to isolate the enviromental requirements of your application from you host operating system.</p><h3>Create a virtual environment</h3><p>You can create a virtual environment using venv. Run the following command to create a new virtual environment called ".venv":</p><pre class="codeblock"><code>python -m venv .venv</code></pre><p>Next, activate the virtual environment:</p><pre class="codeblock"><code>.venv\Scripts\activate #for Windows
source .venv/bin/activate #for *nix</code></pre><p>Now that we've activated our environment, we can start building out Django app in it! Before we can begin writing specific code for our application we must create a project and an app.</p><h2>Create a Project&nbsp;</h2><p><strong>cd</strong>&nbsp;into a directory where you’d like to store your Django project and run the following command to create a project called "snacks_project":</p><pre class="codeblock"><code>$ django-admin startproject snacks_project</code></pre><p>Django will generate some basic files and folders for your snacks_project.</p><img src="https://content.api.getguru.com/files/view/ded63a6f-5912-444b-99ae-6101030fd2ce" alt="image.png"><p>These files include:</p><ul><li><p>The outer&nbsp;<strong>mysite/</strong>&nbsp;root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.</p></li><li><p><a target="_blank" rel="noopener noreferrer" href="http://manage.py"><strong>manage.py</strong></a>: A command-line utility that lets you interact with this Django project in various ways. Reference&nbsp;<a target="_blank" rel="noopener noreferrer" href="https://docs.djangoproject.com/en/4.1/ref/django-admin/">django-admin and </a><a target="_blank" rel="noopener noreferrer" href="http://manage.py">manage.py</a>.</p></li><li><p>The inner&nbsp;<strong>mysite/</strong>&nbsp;directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it such as urls or modules(e.g.&nbsp;<strong>mysite.urls</strong>).</p></li><li><p><strong>mysite/__init__.py</strong>: An empty file that tells Python that this directory should be considered a Python package.</p></li><li><p><strong>mysite/settings.py</strong>: Settings/configuration for this Django project.&nbsp;Reference: <a target="_blank" rel="noopener noreferrer" href="https://docs.djangoproject.com/en/4.1/topics/settings/">Django settings</a></p></li><li><p><strong>mysite/urls.py</strong>: The URL or the “table of contents” of your Django-powered site. Reference:&nbsp;<a target="_blank" rel="noopener noreferrer" href="https://docs.djangoproject.com/en/4.1/topics/http/urls/">URL dispatcher</a></p></li><li><p><strong>mysite/asgi.py</strong>: An entry-point for serving your project to ASGI-compatible web servers.</p></li><li><p><strong>mysite/wsgi.py</strong>: An entry-point for serving your project to WSGI-compatible web servers.</p></li></ul><p>Next, use the <a target="_blank" rel="noopener noreferrer" href="http://manage.py">manage.py</a> utility to launch the server. To do this, navigate to the directory where the <a target="_blank" rel="noopener noreferrer" href="http://manage.py">manage.py</a> file exists and run the following code:</p><pre class="codeblock"><code>python manage.py runserver</code></pre><p>You should see a URL for a local, running instance of your server:</p><img src="https://content.api.getguru.com/files/view/7f3a110b-8254-4487-a2a5-ed305e887ad3" alt="django-app-launch-page-by-switch-code.io.png"><p>* You may see a warning in your console about unapplied migrations. To apply these default migrations, stop the server. Then run:</p><pre class="codeblock"><code>python manage.py migrate</code></pre><p>Restart server and the unapplied migrations notices should disappear.</p><h2>Create an App</h2><p>Now, let's create our app. &nbsp;An <em>app </em>is a Python package that is intended for use in a Django project. The app makes use of common Django conventions, such as <strong>models</strong>,&nbsp;<strong>tests</strong>,&nbsp;<strong>urls</strong>, and&nbsp;<strong>views</strong>&nbsp;to run the app. We will cover Django conventions in the next article.</p><p>To create an app, navigate to the same directory as the&nbsp;<a target="_blank" rel="noopener noreferrer" href="http://manage.py"><strong>manage.py</strong></a>&nbsp;file and use manage.py to create the app. Make sure you’re in the same directory as&nbsp;<a target="_blank" rel="noopener noreferrer" href="http://manage.py"><strong>manage.py</strong></a>. Creating you app here allows the app to be imported as its own top-level module</p><p>Create a new app using the manage.py utilitiy.</p><pre class="codeblock"><code>python manage.py startapp snacks</code></pre><p>You should see new directory with you app name "snacks". This folder contains important data about the app such as app definitions, urls, tests, views and so on:</p><img src="https://content.api.getguru.com/files/view/37452b5a-afed-4325-a486-f5acd695b190" alt="Django app files and folders - switchcode.io"><h4>Register App</h4><p>Next, we need to register our app. To do this, modify our project's <a target="_blank" rel="noopener noreferrer" href="http://settings.py">settings.py</a> file and add 'snacks' app to the project, under INSTALLED_APPS:</p><img src="https://content.api.getguru.com/files/view/d586cc8f-cfb9-4224-8997-beb9f246a78d" alt="register-Django-app-switchcode.io.png"><p>In the next article, we look at how to create custom HTML webpages using the Django template language. Join us in the next article as we will look at how to create html wep pages by configuring views, urls and templates to make 2-page app .</p><p>If you enjoyed this article and would like a cheat-sheet to help you set up a Django project fast, please subscribe.</p><p></p>